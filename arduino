#include <WiFi.h>
#include <HTTPClient.h>
#include <NewPing.h>
#include <ESP32Servo.h>

// ูุนูููุงุช Wi-Fi
const char* ssid = "mohammad";
const char* password = "mohammad123456789";

// ูุนูููุงุช ุจูุช ุชููุบุฑุงู
String botToken = "8007852908:AAHtzuSfUexHroONhjg4_Ee5IxSruGSqy-g";
String chatId = "7272985946";

// ุฅุนุฏุงุฏุงุช ุงูุฑุงุฏุงุฑ
#define TRIG_PIN 5  
#define ECHO_PIN 18  
#define MAX_DISTANCE 200  
#define DETECTION_THRESHOLD 40  // ุงููุณุงูุฉ ุงูุชู ูุชู ุนูุฏูุง ุฅุฑุณุงู ุงูุฅุดุนุงุฑ (ุณู)

// ุฅุนุฏุงุฏุงุช ุงูุณูุฑูู
#define SERVO_PIN 13
Servo servoMotor;

// ูุฎุงุฑุฌ LED
#define LED_SETUP 25        // ูุดูุฑ ุฅูู ุงูุชูุงุก ุงูุฅุนุฏุงุฏ
#define LED_ULTRASONIC 26   // ูุดูุฑ ุฅูู ูุฑุงุกุฉ ุงููุณุชุดุนุฑ
#define LED_DONE 27         // ูุดูุฑ ุฅูู ุงูุชูุงุก ุงููุฑุงุกุฉ
#define LED_TELEGRAM 33     // ูุดูุฑ ุฅูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ุฅูู ุงููุงุชู

#define BUZZER_PIN 14

// ูุณุชุดุนุฑ ุงููุณุงูุฉ
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);

// ูุชุบูุฑุงุช ููุน ุงูุฅุฑุณุงู ุงููุชูุฑุฑ
bool objectDetected = false;
unsigned long lastSentTime = 0;
const long sendInterval = 5000; // ุฅุฑุณุงู ุฅุดุนุงุฑ ูู 5 ุซูุงูู ููุท

void setup() {
    Serial.begin(9600);
    servoMotor.attach(SERVO_PIN);

    // ุฅุนุฏุงุฏ ุงููุฎุงุฑุฌ ููุฎุงุฑุฌ OUTPUT
    pinMode(LED_SETUP, OUTPUT);
    pinMode(LED_ULTRASONIC, OUTPUT);
    pinMode(LED_DONE, OUTPUT);
    pinMode(LED_TELEGRAM, OUTPUT);
    pinMode(BUZZER_PIN, OUTPUT);

    // ุฅุทูุงุก ุฌููุน ุงูููุฏุงุช ุนูุฏ ุจุฏุก ุงูุชุดุบูู
    digitalWrite(LED_SETUP, LOW);
    digitalWrite(LED_ULTRASONIC, LOW);
    digitalWrite(LED_DONE, LOW);
    digitalWrite(LED_TELEGRAM, LOW);
    digitalWrite(BUZZER_PIN, LOW);

    // ุชุดุบูู LED_SETUP ููุฅุดุงุฑุฉ ุฅูู ุงูุชูุงุก ุงูุฅุนุฏุงุฏ
    digitalWrite(LED_SETUP, HIGH);
    delay(500);
    digitalWrite(LED_SETUP, LOW);

    // ุชุนุทูู WiFi ูุชูููุฑ ุงูุทุงูุฉ
    WiFi.disconnect(true);
    WiFi.mode(WIFI_OFF);
}

void soundBuzzer() {
    digitalWrite(BUZZER_PIN, HIGH);  // ุชุดุบูู ุงูุฒููุฑ
    delay(1000);                      // ุชุดุบููู ููุฏุฉ 500 ููููู ุซุงููุฉ
    digitalWrite(BUZZER_PIN, LOW); 
}

void loop() {
    for (int angle = 0; angle <= 180; angle += 2) {
        servoMotor.write(angle);
        delay(50);
        sendDistance(angle);  // ุงุณุชุฏุนุงุก ุงูุฏุงูุฉ ุจุนุฏ ุชุนุฑูููุง
    }

    for (int angle = 180; angle >= 0; angle -= 2) {
        servoMotor.write(angle);
        delay(50);
        sendDistance(angle);  // ุงุณุชุฏุนุงุก ุงูุฏุงูุฉ ุจุนุฏ ุชุนุฑูููุง
    }
}

void sendDistance(int angle) {
    // ุชุดุบูู LED ุนูุฏ ุจุฏุก ูุฑุงุกุฉ ุงููุณุชุดุนุฑ
    digitalWrite(LED_ULTRASONIC, HIGH);

    long distance = sonar.ping_cm();
    if (distance == 0) distance = MAX_DISTANCE;

    Serial.print(angle);
    Serial.print(",");
    Serial.println(distance);
    delay(10);

    checkDistance(distance, angle);

    // ุฅุทูุงุก LED ุจุนุฏ ุงูุชูุงุก ุงููุฑุงุกุฉ
    digitalWrite(LED_ULTRASONIC, LOW);

    // ุชุดุบูู LED_DONE ุจุนุฏ ุงูุฅุฑุณุงู
    digitalWrite(LED_DONE, HIGH);
    delay(50);
    digitalWrite(LED_DONE, LOW);
}

void checkDistance(long distance, int angle) {
    if (distance <= DETECTION_THRESHOLD && !objectDetected) {
        unsigned long currentMillis = millis();
        if (currentMillis - lastSentTime >= sendInterval) {
            String message = "๐จ Object detected!\n";
            message += "Distance:" + String(distance) + " CM\n";
            message += "Angle: " + String(angle) + "ยฐ";
            sendTelegramMessage(message);
            lastSentTime = currentMillis;
        }
        objectDetected = true;
        
        soundBuzzer();
    } else if (distance > DETECTION_THRESHOLD) {
        objectDetected = false;
    }
}

void sendTelegramMessage(String message) {
    // ุชุดุบูู LED_TELEGRAM ุนูุฏ ุจุฏุก ุงูุฅุฑุณุงู
    
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    
    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 5000) {
        delay(500);
    }

    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;

        // ุงุณุชุจุฏุงู "\n" ุจู "%0A" ูุฅุถุงูุฉ ุณุทูุฑ ุฌุฏูุฏุฉ ูู ุชููุบุฑุงู
        message.replace("\n", "%0A");

        String url = "https://api.telegram.org/bot" + botToken + "/sendMessage?chat_id=" + chatId + "&text=" + message;
        http.begin(url);
        int httpResponseCode = http.GET();
        if (httpResponseCode > 0) {
            Serial.println("๐ฉ Message sent to Telegram!");
            digitalWrite(LED_TELEGRAM, HIGH);

        } else {
            Serial.print("โ Sending error: ");
            Serial.println(httpResponseCode);
        }
        http.end();
    }

    // ุชุนุทูู WiFi ุจุนุฏ ุงูุฅุฑุณุงู ูุชูููุฑ ุงูุทุงูุฉ
    WiFi.disconnect(true);
    WiFi.mode(WIFI_OFF);

    // ุฅุทูุงุก LED_TELEGRAM ุจุนุฏ ุงูุฅุฑุณุงู
    digitalWrite(LED_TELEGRAM, LOW);
}
